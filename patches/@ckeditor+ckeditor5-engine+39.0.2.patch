diff --git a/node_modules/@ckeditor/ckeditor5-engine/src/view/renderer.js b/node_modules/@ckeditor/ckeditor5-engine/src/view/renderer.js
index 1991e0d..0e9943e 100644
--- a/node_modules/@ckeditor/ckeditor5-engine/src/view/renderer.js
+++ b/node_modules/@ckeditor/ckeditor5-engine/src/view/renderer.js
@@ -136,7 +136,8 @@ export default class Renderer extends ObservableMixin() {
         // All marked elements, attributes, etc. will wait until next render after the composition ends.
         // On Android composition events are immediately applied to the model, so we don't need to skip rendering,
         // and we should not do it because the difference between view and DOM could lead to position mapping problems.
-        if (this.isComposing && !env.isAndroid) {
+        //if (this.isComposing && env.isAndroid) {
+        if (this.isComposing) {
             // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {
             // @if CK_DEBUG_TYPING // 	console.info( '%c[Renderer]%c Rendering aborted while isComposing',
             // @if CK_DEBUG_TYPING // 		'color: green;font-weight: bold', ''
@@ -478,6 +479,9 @@ export default class Renderer extends ObservableMixin() {
      */
     _updateChildren(viewElement, options) {
         const domElement = this.domConverter.mapViewToDom(viewElement);
+
+console.log('_updateChildren', viewElement, options);
+
         if (!domElement) {
             // If there is no `domElement` it means that it was already removed from DOM.
             // There is no need to process it. It will be processed when re-inserted.
@@ -539,6 +543,7 @@ export default class Renderer extends ObservableMixin() {
         }
         i = 0;
         for (const action of actions) {
+
             if (action === 'insert') {
                 // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {
                 // @if CK_DEBUG_TYPING // 	console.info( '%c[Renderer]%c Insert node',
@@ -550,13 +555,18 @@ export default class Renderer extends ObservableMixin() {
             }
             // Update the existing text node data. Note that replace action is generated only for Android for now.
             else if (action === 'update') {
-                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {
-                // @if CK_DEBUG_TYPING // 	console.group( '%c[Renderer]%c Update text node',
-                // @if CK_DEBUG_TYPING // 		'color: green;font-weight: bold', ''
-                // @if CK_DEBUG_TYPING // 	);
-                // @if CK_DEBUG_TYPING // }
-                updateTextNode(actualDomChildren[i], expectedDomChildren[i].data);
+
+                console.group( '%c[Renderer]%c Update text node',
+                 		'color: green;font-weight: bold', ''
+                 	);
+                }
+
+                if(!this.isComposing){
+                    updateTextNode(actualDomChildren[i], expectedDomChildren[i].data);
+                }
+
                 i++;
+
                 // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {
                 // @if CK_DEBUG_TYPING // 	console.groupEnd();
                 // @if CK_DEBUG_TYPING // }
@@ -619,6 +629,9 @@ export default class Renderer extends ObservableMixin() {
         let expectedSlice = [];
         const counter = { equal: 0, insert: 0, delete: 0 };
         for (const action of actions) {
+
+console.log('findUpdateActions action:', action, 'this.isComposing', this.isComposing)
+
             if (action === 'insert') {
                 expectedSlice.push(expectedDom[counter.equal + counter.insert]);
             }
